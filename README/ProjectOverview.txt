                        PROJECT OVERVIEW:

https://chatgpt.com/c/686bf666-b968-8003-9835-5d3bc9734478

DungeonCrawler is a text‑based console game where you:

    1. See a dungeon map drawn with #, . and special symbols (@ for you, M for monsters).
    2. Move around with w/a/s/d.
    3. Encounter monsters and trigger simple combat.
    4. (Later) Save/load your progress, add inventory, more monsters, etc.


Milestones (Levels 1–5)

    LEVEL 1: Grid generates and prints; you can move @ inside the walls
    LEVEL 2: One or more M monster(s); stepping on M triggers an “encounter”
    LEVEL 3: Hit‑points + combat roll; save & load game state to a file
    LEVEL 4: Refactored into classes/modules (Grid, Game, Monster, …); tests
    LEVEL 5: Graphical front‑end (SDL/Qt), networking or plugins, polished UX

EXPECTED OUTPUT:

LEVEL 1:

    @ starts at (1,1).
    Typing d shifts it right; s moves you down—walls (#) block you.

##########
#@.......#
#........#
#........#
#........#
#........#
#........#
#........#
#........#
##########
Move (w/a/s/d):

LEVEL 2:

Design summary
Player HP & Missions

The player earns HP (or “power points”) by completing missions.

Starting HP is some baseline (e.g. 5 HP).

Monster Tiers

Each monster has an HP requirement: e.g.

“Weak” monsters: 5 HP

“Average” monsters: 20 HP

“Strong” monsters: 50 HP

Monsters spawn randomly on empty cells—but only tiers the player can reasonably encounter (e.g. don’t spawn two strong ones if player has low HP).

Collision outcome

Player HP > Monster HP → monster dies (removed from map).

Player HP < Monster HP → player dies (game over).

Player HP == Monster HP → special “equal‐level” encounter (future mechanic).

Level 2 tasks
Add HP stat to Entity

Create a small Stats struct (or just int m_hp) in Entity.

Initialize Player with baseline HP and Monster with a tiered HP value.

Tiered monster generation

Define a list of allowed monster HP tiers, e.g. {5, 20, 50}.

In Game, randomly pick a tier based on player’s current HP (e.g. only tiers ≤ playerHP+10).

Place one monster at a random empty cell on the grid.

Implement collision logic

In Game::run(), when collidesWith is true:

cpp
Copy code
if (player.hp > monster.hp) {
  // remove monster, maybe award XP/HP
}
else if (player.hp < monster.hp) {
  // print “You died.” and end game
}
else {
  // print “Equal strength! Special encounter.”
}
For now, simply erase the monster or end the loop.

Manual HP‑gain hook

Add a simple placeholder in Game (e.g. pressing ‘h’) that gives the player +5 HP so you can test different tiers without “missions” yet.

